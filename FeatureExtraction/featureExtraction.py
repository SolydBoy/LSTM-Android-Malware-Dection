import zipfile
import subprocess
from subprocess import check_output

from typing import Dict

from resources import PERMISSIONS
from resources import INTENTS

DEBUG_PATH = "../DataBase/benign/00753DD9164683E9094D162FD1A50F5878C1D47E212F8079055345CE2379208F.apk"

DEX_FILE_NAME = "classes.dex"
JAR_SRC_NAME = "/jarsrc.zip"
DEX2JAR_PATH = "./dex-tools-2.1-SNAPSHOT/d2j-dex2jar.sh"
ANDROIDMANIFEST_PATH = "/AndroidManifest.xml"
AXMLPRINTER_PATH = 'AXMLPrinter2.jar'


class featureExtraction:
    def __init__(self):
        print("init oui")

    @staticmethod
    def binary_xml_to_xml(path: str):
        readable_data = check_output(["java", "-jar", "AXMLPrinter2.jar", path])
        with(open(path, "w")) as content:
            print("java", "-jar", "AXMLPrinter2.jar", path)
            content.write(readable_data.decode("utf-8"))

    @staticmethod
    def apk_unzip(apk_path: str, destination: str = './') -> str:
        print(apk_path)
        dir_name = apk_path.split('/')[-1].split('.')[0]
        with zipfile.ZipFile(apk_path, 'r') as zip_ref:
            zip_ref.extractall(destination + dir_name)
            try:
                with open(destination + dir_name + ANDROIDMANIFEST_PATH) as AndroidManifestData:
                    c = AndroidManifestData.read(1)
                    if c != '<':
                        featureExtraction.binary_xml_to_xml(destination + dir_name + ANDROIDMANIFEST_PATH)
            except UnicodeDecodeError:
                featureExtraction.binary_xml_to_xml(destination + dir_name + ANDROIDMANIFEST_PATH)
            return destination + dir_name

    @staticmethod
    def reverse_engineering_jar(apk_path: str) -> str:
        dir_name = apk_path + JAR_SRC_NAME
        print(dir_name)
        subprocess.call([DEX2JAR_PATH, '-o', dir_name, apk_path + "/" + DEX_FILE_NAME, '--force'])
        return apk_path

    @staticmethod
    def find_occurrence(data: str, occurrence: Dict[str, str]) -> Dict[str, str]:
        res = occurrence
        for intent in res:
            if data.find(intent) != -1:
                res[intent] = 1
        return res

    @staticmethod
    def extract_manifest_features(apk_path) -> [Dict[str, str]]:
        with(open(apk_path + ANDROIDMANIFEST_PATH, "r")) as manifest:
            data = manifest.read().replace('\n', '')
            intents = featureExtraction.find_occurrence(data, INTENTS)
            permission = featureExtraction.find_occurrence(data, PERMISSIONS)
            return [permission, intents]

    def extract_function_names(self, apk_path: str, is_reverse: bool = False) -> None:
        print("oui")

    def feature_extraction(self, apk_paths: [str]) -> None:
        for path in apk_paths:
            out_dir = featureExtraction.reverse_engineering_jar(path)


if __name__ == "__main__":
    a = featureExtraction()
    dir = a.apk_unzip(DEBUG_PATH)
    print(a.extract_manifest_features(dir))
