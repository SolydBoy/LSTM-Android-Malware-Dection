from FeatureExtraction.featureExtraction import featureExtraction
import sys
from FeatureSelection.featureSelection import featureSelection
from sklearn.metrics import classification_report
from Classifier.classifier import classifier
import os
import numpy as np

FULL_PATH = r'C:/Users/Basile/Documents/GitHub/LSTM-Android-Malware-Dection'


def extract_feature(extractor: featureExtraction):
    path_benign = os.listdir("./DataBase/benign")
    path_benign = list(map(lambda x: FULL_PATH + r"/DataBase/benign/" + x, path_benign))
    path_malware = os.listdir("./DataBase/malware/")
    path_malware = list(map(lambda x: FULL_PATH + r"/DataBase/malware/" + x, path_malware))
    labels = [0] * len(path_benign) + [1] * len(path_malware)
    extractor.feature_extraction(path_benign + path_malware, labels, "./dest/", apktool_bool=False)
    # extractor.feature_extraction(["./DataBase/benign/10C01BB54883ED7A14190509F3294C9CD0832837D2F7B91AFF25919262F34612.apk"], [1], "./dest/", apktool_bool=False)

    # extractor.extract_sequence_feature(path_benign + path_malware, labels, "./dest/", apktool_bool=False)
    # extractor.extract_sequence_feature(["./DataBase/benign/00753DD9164683E9094D162FD1A50F5878C1D47E212F8079055345CE2379208F.apk"], [1], "./dest/", apktool_bool=False)
    path = "./DataBase/benign/00753DD9164683E9094D162FD1A50F5878C1D47E212F8079055345CE2379208F.apk"
    dest = "./dest/"
    dir = dest + path.split('/')[-1].split('.')[0]
    # extractor.reverse_engineering_jar(path, dir)
    # extractor.extract_sequence_feature(["../DataBase/benign/16CF85D716C7F747FB6A2EBD91CBFBBBEE0C1FF7BA8CC514FC1AE1899676E430.apk"], [1], "./dest/")


if __name__ == '__main__':
    extractor = featureExtraction("./new_feature.csv")
    extract_feature(extractor)
    sys.exit(0)
    data = featureExtraction.read_csv("./test.csv")
    a = featureSelection(*data)
    print(a.X.shape)
    selector, res = a.variance_selection()
    # print(res.shape)
    # print(a.X_header[selector.get_support()])
    # selector, res = a.Kbest_selection()
    # print(res.shape)
    # selector, res = a.select_percentile()
    # print(res.shape)
    selector, res = a.select_from_model()
    # selector, res = a.recursive_selector()
    print(res.shape)
    classifier = classifier(res, data[2])
    reg, score = classifier.linear_regression()
    reg, score = classifier.random_forest()
    reg, score = classifier.J48()
    reg, score = classifier.MLP()
