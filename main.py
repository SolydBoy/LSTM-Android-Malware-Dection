import sys

from Classifier.SequenceLoader import SequenceLoarder
from FeatureExtraction.featureExtraction import featureExtraction
from Classifier.classifier import classifier
import os

FULL_PATH = r'C:/Users/Basile/Documents/GitHub/LSTM-Android-Malware-Dection'


def extract_feature(extractor: featureExtraction):
    path_benign = os.listdir("./DataBase/test/benign")
    path_benign = list(map(lambda x: r"./DataBase/test/benign/" + x, path_benign))
    path_malware = os.listdir("./DataBase/test/malware/")
    path_malware = list(map(lambda x: r"./DataBase/test/malware/" + x, path_malware))
    labels = [0] * len(path_benign) + [1] * len(path_malware)
    # extractor.feature_extraction(path_benign + path_malware, labels, "./dest/", apktool_bool=False)
    # extractor.feature_extraction(["./DataBase/benign/10C01BB54883ED7A14190509F3294C9CD0832837D2F7B91AFF25919262F34612.apk"], [1], "./dest/", apktool_bool=False)
    extractor.extract_sequence_feature(path_benign + path_malware, "./dest/test/", apktool_bool=False)
    # extractor.extract_sequence_feature(["./DataBase/benign/00753DD9164683E9094D162FD1A50F5878C1D47E212F8079055345CE2379208F.apk"], [1], "./dest/", apktool_bool=False)
    # extractor.extract_sequence_feature(path_benign[:5] + path_malware[:5], [1] * 10, "./dest/", apktool_bool=False)


if __name__ == '__main__':
    extract_feature(featureExtraction("D:/Train_model"))
    sys.exit(0)
    # X, y = featureExtraction.read_sequence_feature("D:/Test_Depth_1628937218.1995125.csv")
    train_gene = SequenceLoarder("C:/Users/Basile/Documents/GitHub/LSTM-Android-Malware-Dection/DataBase/train",
                                 "D:/Train_Typed_1628949090.414119", padding=True, batch_size=10, shuffle=True)
    test_gene = SequenceLoarder("C:/Users/Basile/Documents/GitHub/LSTM-Android-Malware-Dection/DataBase/test",
                                "D:/Test_Typed_1628958476.9498594", padding=True, batch_size=1, shuffle=True)
    # X = pad_sequences(X, padding="post")
    # print(X.shape)

    classifier = classifier(name="tanh_TYPED_64_60")
    classifier.LSTM_classifier(train_gene, test_gene, 60)
