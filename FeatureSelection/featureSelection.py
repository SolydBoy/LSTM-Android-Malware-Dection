import numpy as np
import pandas as pd
from sklearn.feature_selection import SelectFromModel, RFECV, VarianceThreshold, SelectKBest, SelectPercentile, chi2
from sklearn.linear_model import SGDClassifier
from typing import Tuple, Callable
from pandas.core.series import Series
from pandas.core.frame import DataFrame

class featureSelection:
    def __init__(self,  data: DataFrame, X: DataFrame, y: Series):
        self.data = data
        self.y = y
        self.X_header = data.columns.delete(0)
        self.X = X

    def variance_selection(self, threshold: float = 0.2) -> Tuple[VarianceThreshold, np.ndarray]:
        selector = VarianceThreshold(threshold=threshold)
        res = selector.fit_transform(self.X)
        return selector, res

    def Kbest_selection(self, test: Callable = chi2, k=10) -> Tuple[SelectKBest, np.ndarray]:
        selector = SelectKBest(test, k=k)
        res = selector.fit_transform(self.X, self.y)
        return selector, res

    def select_percentile(self, test: Callable = chi2, percentile: int = 10) -> Tuple[SelectPercentile, np.ndarray]:
        selector = SelectPercentile(test, percentile=percentile)
        res = selector.fit_transform(self.X, self.y)
        return selector, res

    def select_from_model(self, classifer: Callable = SGDClassifier(random_state=0), threshold: str = 'mean') -> Tuple[SelectFromModel, np.ndarray]:
        selector = SelectFromModel(classifer, threshold=threshold)
        res = selector.fit_transform(self.X, self.y)
        return selector, res

    def recursive_selector(self, classifer: Callable = SGDClassifier(random_state=0), step: int = 10, min_features_to_select: int = 2, split: int = 2) -> Tuple[RFECV, np.ndarray]:
        selector = RFECV(classifer, step=step, min_features_to_select=min_features_to_select, cv=split)
        res = selector.fit_transform(self.X, self.y)
        return selector, res

